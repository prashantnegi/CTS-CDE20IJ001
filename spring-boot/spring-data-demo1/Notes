    OneToOne
    @OneToOne(mappedBy = "user", fetch = FetchType.LAZY,
            cascade = CascadeType.ALL)
    private Address address;


    @OneToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    fetch — Defines a strategy for fetching data from the database. By default, it is EAGER which means that the data must be eagerly fetched. We have set it to LAZY to fetch the entities lazily from the database.
    
    cascade — Defines a set of cascadable operations that are applied to the associated entity. CascadeType.ALL means to apply all cascading operations to the related entity. Cascading operations are applied when you delete or update the parent entity.
    
    mappedBy — Defines the entity that owns the relationship which is the Address entity in our case.
    
    optional — Defines whether the relationship is optional. If set to false then a non-null relationship must always exist.
    
    @JoinColumn Annotation

    The @JoinColumn annotation is used to specify the foreign key column in the owner of the relationship. The inverse-side of the relationship sets the @OneToOne's mappedBy parameter to indicate that the relationship is mapped by the other entity.

    The @JoinColumn accepts the following two important parameters, among others:

    name — Defines the name of the foreign key column.

    nullable — Defines whether the foreign key column is nullable. By default, it is true.


    OneToMany

    @OneToMany(mappedBy = "book", fetch = FetchType.LAZY,
        cascade = CascadeType.ALL)
    private Set<Page> pages;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "book_id", nullable = false)
    private Book book;